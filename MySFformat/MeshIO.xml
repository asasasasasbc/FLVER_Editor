<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MeshIO</name>
    </assembly>
    <members>
        <member name="M:MeshIO.Core.ReaderBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:MeshIO.Element3D">
            <summary>
            Base class for all the elements contained in the 3D environment
            </summary>
        </member>
        <member name="P:MeshIO.Element3D.Id">
            <summary>
            Unique id to identify this element
            </summary>
        </member>
        <member name="P:MeshIO.Element3D.Name">
            <summary>
            Name of the element
            </summary>
        </member>
        <member name="P:MeshIO.Element3D.Properties">
            <summary>
            Properties of this element
            </summary>
        </member>
        <member name="M:MeshIO.Element3D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MeshIO.Element3D.GetIdOrDefault">
            <summary>
            Gets the Id of the object, if is null it sets a value
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeshIO.Element3D.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MeshIO.Entities.Bone">
            <summary>
            Represents a bone in a skeleton hierarchy.
            Bones are nodes with specific properties relevant to skinning and animation.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Bone.Length">
            <summary>
            Optional length of the bone.
            In many systems, bone length is implicitly defined by the distance to its child or a specific end point.
            FBX uses a "Size" property for LimbNode type, which can represent this.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Bone.IsSkeletonRoot">
            <summary>
            Indicates if this bone should be treated as the root of a skeleton hierarchy in FBX.
            If true, its FBX Model type will be "Skeleton"; otherwise, "LimbNode".
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Bone.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Bone.#ctor(System.String)">
            <summary>
            Constructor with a name.
            </summary>
            <param name="name">The name of the bone.</param>
        </member>
        <member name="T:MeshIO.Entities.Entity">
            <summary>
            Represents a 3D entity wich is attached to one or more nodes, entities allow instancing
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Entity.ParentNodes">
            <summary>
            Parents for this entity, multiple parents are possible to allow entity instancing
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Geometries.Geometry.IsVisible">
            <summary>
            The geometry is visible or not
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Geometries.Geometry.CastShadows">
            <summary>
            This geometry can cast shadow or not
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Geometries.Geometry.ReceiveShadows">
            <summary>
            This geometry can receive shadow or not
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Geometries.Layers.LayerElement.Name">
            <summary>
            Name of the layer
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Geometries.Layers.LayerElementNormal.Add(CSMath.XYZ,System.Double)">
            <summary>
            Add a normal
            </summary>
            <param name="normal"></param>
            <param name="wheight">wheight of the normal added</param>
        </member>
        <member name="M:MeshIO.Entities.Geometries.Layers.LayerElementNormal.AddRange(System.Collections.Generic.IEnumerable{CSMath.XYZ},System.Double)">
            <summary>
            Add a collection of normals
            </summary>
            <param name="normals"></param>
            <param name="wheight">wheight of the normal added</param>
        </member>
        <member name="T:MeshIO.Entities.Geometries.Layers.MappingMode">
            <summary>
            Determines how the element is mapped to a surface
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.MappingMode.ByVertex">
            <summary>
            Each element is mapped to the a vertex of the geometry
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.MappingMode.ByPolygonVertex">
            <summary>
            Elements are mapped to each polygon vertex
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.MappingMode.ByPolygon">
            <summary>
            Elements are mapped to each polygon
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.MappingMode.ByEdge">
            <summary>
            Element is mapped to each edge
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.MappingMode.AllSame">
            <summary>
            One element is mapped to the whole geometry
            </summary>
        </member>
        <member name="T:MeshIO.Entities.Geometries.Layers.ReferenceMode">
            <summary>
            Defines how the element is referenced by
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.ReferenceMode.Direct">
            <summary>
            Elements are directly referenced
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.ReferenceMode.Index">
            <summary>
            Elements are referenced by index
            </summary>
        </member>
        <member name="F:MeshIO.Entities.Geometries.Layers.ReferenceMode.IndexToDirect">
            <summary>
            Elements are referenced by index and accessed by index
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Geometries.Mesh.AddPolygons(CSMath.XYZ[])">
            <summary>
            
            </summary>
            <param name="vertices"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MeshIO.Entities.Geometries.Triangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Geometries.Triangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Setup a triangle with the 3 indexes.
            </summary>
            <param name="i0"></param>
            <param name="i1"></param>
            <param name="i2"></param>
        </member>
        <member name="M:MeshIO.Entities.Primitives.Box.CreateMesh">
            <inheritdoc/>
            <remarks>
            The current implementation returns a mesh with no shared vertices and the following layers:<br/>
            <see cref="T:MeshIO.Entities.Geometries.Layers.LayerElementNormal"/><br/>
            <see cref="T:MeshIO.Entities.Geometries.Layers.LayerElementUV"/><br/>
            configured with <see cref="F:MeshIO.Entities.Geometries.Layers.MappingMode.ByVertex"/> and <see cref="F:MeshIO.Entities.Geometries.Layers.ReferenceMode.Direct"/>
            </remarks>
        </member>
        <member name="P:MeshIO.Entities.Primitives.Primitive.IsVisible">
            <summary>
            The geometry is visible or not
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Primitives.Primitive.CastShadows">
            <summary>
            This geometry can cast shadow or not
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Primitives.Primitive.ReceiveShadows">
            <summary>
            This geometry can receive shadow or not
            </summary>
        </member>
        <member name="M:MeshIO.Entities.Primitives.Primitive.CreateMesh">
            <summary>
            Process this primitive into a mesh
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeshIO.Entities.ProjectionType">
            <summary>
            Camera's projection types
            </summary>
        </member>
        <member name="F:MeshIO.Entities.ProjectionType.Perspective">
            <summary>
            The camera uses perspective projection
            </summary>
        </member>
        <member name="F:MeshIO.Entities.ProjectionType.Orthographic">
            <summary>
            The camera uses orthographic projection
            </summary>
        </member>
        <member name="T:MeshIO.Entities.Skinning.Cluster">
            <summary>
            Represents an FBX Cluster, which links a bone to a set of vertices with weights.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.Link">
            <summary>
            The bone (Node) this cluster deforms.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.Indexes">
            <summary>
            Indices of the vertices in the target geometry that this cluster influences.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.Weights">
            <summary>
            Weights corresponding to the vertex indices. Must have the same count as Indexes.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.TransformMatrix">
            <summary>
            Transform of the link (bone) in global space at bind time.
            This is the inverse of the bone's world matrix at bind pose.
            FBX stores it as: MeshWorldBindPose * BoneWorldBindPoseInverse * MeshRestPoseInverse (often MeshRestPoseInverse is Identity)
            Or more simply, it's often the bone's world matrix when the mesh is in its bind pose.
            For FBX: This is the world transformation matrix of the bone (Link) at bind time.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.TransformLinkMatrix">
            <summary>
            Transform of the geometry (mesh) in global space at bind time.
            For FBX: This is the world transformation matrix of the mesh at bind time.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Cluster.Mode">
            <summary>
            Mode of the cluster, e.g., "TotalOne", "Normalized", "Additive".
            </summary>
        </member>
        <member name="T:MeshIO.Entities.Skinning.Skin">
            <summary>
            Represents an FBX Skin deformer, which groups clusters to deform a geometry.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Skin.DeformedGeometry">
            <summary>
            The geometry (Mesh) this skin deforms.
            This is not directly stored in FBX Skin object but connected to it.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Skin.Clusters">
            <summary>
            The clusters defining the influence of each bone.
            These are children Deformer objects of type Cluster in FBX.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Skin.SkinningType">
            <summary>
            Skinning type. FBX uses a string or an enum-like value.
            Common values: "Linear", "DualQuaternion", "Blend".
            In FBX properties, it's often a double: 0 for Linear, 1 for Rigid, 2 for Dual Quaternion.
            </summary>
        </member>
        <member name="P:MeshIO.Entities.Skinning.Skin.LinkDeformAccuracy">
            <summary>
            Accuracy of the deformation link. Default is 50.0 in FBX.
            </summary>
        </member>
        <member name="F:MeshIO.IdUtils._random">
            <remarks>
            Avoid duplicated ids in the tight loops.
            </remarks>
        </member>
        <member name="M:MeshIO.IdUtils.CreateId">
            <summary>
            Creates an id as a long.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MeshIO.Node.IsVisible">
            <summary>
            The node and all the components are visible or not
            </summary>
        </member>
        <member name="P:MeshIO.Node.Transform">
            <summary>
            Get the local transform for this node
            </summary>
        </member>
        <member name="P:MeshIO.Node.Parent">
            <summary>
            Get the parent for this node
            </summary>
        </member>
        <member name="M:MeshIO.Node.GetGlobalTransform">
            <summary>
            Get the global transformation for this node
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MeshIO.Property">
            <summary>
            User defined property
            </summary>
        </member>
        <member name="P:MeshIO.Property.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:MeshIO.Property.Flags">
            <summary>
            Property flags
            </summary>
        </member>
        <member name="P:MeshIO.Property.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="P:MeshIO.Property.Owner">
            <summary>
            3D object that owns this property
            </summary>
        </member>
        <member name="M:MeshIO.Property.ConvertProperty``1(MeshIO.Property)">
            <summary>
            Convert a property into its typed equivalent
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:MeshIO.PropertyCollection.Count">
            <summary>
            Gets the number of elements that are contained in the collection
            </summary>
        </member>
        <member name="M:MeshIO.PropertyCollection.Add(MeshIO.Property)">
            <summary>
            Add a property to the collection
            </summary>
            <param name="property"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MeshIO.PropertyCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains the specified property
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeshIO.PropertyCollection.Remove(MeshIO.Property)">
            <summary>
            Remove property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:MeshIO.PropertyCollection.Remove(System.String)">
            <summary>
            Remove a property by it's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeshIO.PropertyCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:MeshIO.PropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="F:MeshIO.PropertyFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:MeshIO.PropertyFlags.Locked">
            <summary>
            Not serializable
            </summary>
        </member>
        <member name="F:MeshIO.PropertyFlags.UserDefined">
            <summary>
            This is a user defined property
            </summary>
        </member>
        <member name="F:MeshIO.PropertyFlags.Animatable">
            <summary>
            The property is animatable
            </summary>
        </member>
        <member name="F:MeshIO.PropertyFlags.Animated">
            <summary>
            The property is animated
            </summary>
        </member>
        <member name="F:MeshIO.PropertyFlags.Hidden">
            <summary>
            The property is marked as hidden
            </summary>
        </member>
        <member name="P:MeshIO.Scene.RootNode">
            <summary>
            Root node of the scene
            </summary>
        </member>
        <member name="P:MeshIO.SceneElement.Scene">
            <summary>
            Scene where this element belongs to
            </summary>
        </member>
        <member name="T:MeshIO.Shaders.Material">
            <summary>
            Base material class
            </summary>
            <remarks>
            This class is a temporary placeholder to gather the material information
            </remarks>
        </member>
        <member name="P:MeshIO.Transform.Translation">
            <summary>
            Translation applied in the transformation
            </summary>
        </member>
        <member name="P:MeshIO.Transform.Scale">
            <summary>
            Scale applied in the transformation
            </summary>
        </member>
        <member name="P:MeshIO.Transform.EulerRotation">
            <summary>
            Rotation in Euler angles, the value is in degrees
            </summary>
        </member>
        <member name="P:MeshIO.Transform.Quaternion">
            <summary>
            Rotation represented in quaternion form
            </summary>
        </member>
        <member name="P:MeshIO.Transform.Matrix">
            <summary>
            Transform matrix
            </summary>
        </member>
        <member name="M:MeshIO.Transform.ApplyTransform(CSMath.XYZ)">
            <summary>
            Transform the point values
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MeshIO.Utils.Matrix4Extensions.ToRowMajorArray(CSMath.Matrix4)" -->
        <member name="T:CSMath.BoundingBox">
            <summary>
            Bounding box representation aligned to XYZ axis
            </summary>
        </member>
        <member name="P:CSMath.BoundingBox.Min">
            <summary>
            Get the min corner of the bounding box
            </summary>
        </member>
        <member name="P:CSMath.BoundingBox.Max">
            <summary>
            Get the max corner of the bounding box
            </summary>
        </member>
        <member name="P:CSMath.BoundingBox.Center">
            <summary>
            Center of the box
            </summary>
        </member>
        <member name="M:CSMath.BoundingBox.#ctor(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Bounding box constructor with 2 points
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:CSMath.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Bounding box contructor
            </summary>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="minZ"></param>
            <param name="maxX"></param>
            <param name="maxY"></param>
            <param name="maxZ"></param>
        </member>
        <member name="P:CSMath.Geometry.ILine`1.Origin">
            <summary>
            Origin point that the line intersects with
            </summary>
        </member>
        <member name="P:CSMath.Geometry.ILine`1.Direction">
            <summary>
            Direction fo the line
            </summary>
        </member>
        <member name="P:CSMath.Geometry.Line3D.Origin">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.Geometry.Line3D.Direction">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.Geometry.LineExtensions.IsPointOnLine``1(CSMath.Geometry.ILine{``0},``0)">
            <summary>
            Determines whether the specified point is on the line, or not.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:CSMath.Geometry.Line2D.Origin">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.Geometry.Line2D.Direction">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.IVector.Dimension">
            <summary>
            Get the dimension of the <see cref="T:CSMath.IVector"/>.
            </summary>
        </member>
        <member name="P:CSMath.IVector.Item(System.Int32)">
            <summary>
            Value of the coordinate at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The value of the coordinate at the specified index.</returns>
        </member>
        <member name="T:CSMath.Matrix4">
            <summary>
            4x4 Matrix
            </summary>
            <remarks>
            Matrix organization: <br/>
            |m00|m10|m20|m30| <br/>
            |m01|m11|m21|m31| <br/>
            |m02|m12|m22|m32| <br/>
            |m03|m13|m23|m33| <br/>
            </remarks>
        </member>
        <member name="F:CSMath.Matrix4.Zero">
            <summary>
            4-dimensional zero matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.Identity">
            <summary>
            4-dimensional identity matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m00">
            <summary>
            Value at column 0, row 0 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m01">
            <summary>
            Value at column 0, row 1 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m02">
            <summary>
            Value at column 0, row 2 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m03">
            <summary>
            Value at column 0, row 3 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m10">
            <summary>
            Value at column 1, row 0 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m11">
            <summary>
            Value at column 1, row 1 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m12">
            <summary>
            Value at column 1, row 2 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m13">
            <summary>
            Value at column 1, row 3 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m20">
            <summary>
            Value at column 2, row 0 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m21">
            <summary>
            Value at column 2, row 1 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m22">
            <summary>
            Value at column 2, row 2 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m23">
            <summary>
            Value at column 2, row 3 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m30">
            <summary>
            Value at column 3, row 0 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m31">
            <summary>
            Value at column 3, row 1 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m32">
            <summary>
            Value at column 3, row 2 of the matrix.
            </summary>
        </member>
        <member name="F:CSMath.Matrix4.m33">
            <summary>
            Value at column 3, row 3 of the matrix.
            </summary>
        </member>
        <member name="M:CSMath.Matrix4.CreateFromQuaternion(CSMath.Quaternion)">
            <summary>
            Creates a rotation matrix from the given Quaternion rotation value.
            </summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.GetRows">
            <summary>
            Gets the matrix rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSMath.Matrix4.GetCols">
            <summary>
            Gets the matrix columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSMath.Matrix4.GetDeterminant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.Inverse(CSMath.Matrix4,CSMath.Matrix4@)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <param name="result">If successful, contains the inverted matrix.</param>
            <returns>True if the source matrix could be inverted; False otherwise.</returns>
        </member>
        <member name="M:CSMath.Matrix4.Transpose">
            <summary>
            Transposes the rows and columns of this matrix.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.Matrix4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.Matrix4.CreateTranslation(CSMath.XYZ)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="position">The amount to translate in each axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="xPosition">The amount to translate on the X-axis.</param>
            <param name="yPosition">The amount to translate on the Y-axis.</param>
            <param name="zPosition">The amount to translate on the Z-axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateScale(CSMath.XYZ)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateScale(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Creates a scaling matrix with a center point.
            </summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateScale(System.Double)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateScale(System.Double,CSMath.XYZ)">
            <summary>
            Creates a uniform scaling matrix that scales equally on each axis with a center point.
            </summary>
            <param name="scale">The uniform scaling factor.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateRotationMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateFromAxisAngle(CSMath.XYZ,System.Double)">
            <summary>
            Creates a matrix that rotates around an arbitrary vector.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the given axis, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:CSMath.Matrix4.CreateScalingMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Builds a matrix that scales along the x-axis, y-axis, and z-axis.
            </summary>
        </member>
        <member name="M:CSMath.Matrix4.Multiply(CSMath.Matrix4,CSMath.Matrix4)">
            <summary>
            Multiplies two matrices.
            </summary>
            <returns>A new instance containing the result.</returns>
        </member>
        <member name="M:CSMath.Matrix4.op_Multiply(CSMath.Matrix4,CSMath.Matrix4)">
            <summary>
            Multiplies two matrices.
            </summary>
            <returns>A new instance containing the result.</returns>
        </member>
        <member name="M:CSMath.Matrix4.op_Multiply(CSMath.Matrix4,CSMath.XYZ)">
            <summary>Multiply the matrix and a coordinate</summary>
            <param name="matrix"></param>
            <param name="value"></param>
            <returns>Result matrix</returns>
        </member>
        <member name="M:CSMath.Matrix4.op_Multiply(CSMath.Matrix4,CSMath.XYZM)">
            <summary>Multiply the matrix and XYZM</summary>
            <param name="matrix"></param>
            <param name="v"></param>
            <returns>Result matrix</returns>
        </member>
        <member name="F:CSMath.MathUtils.RadToDegFactor">
            <summary>
            Factor for converting radians to degrees.
            </summary>
        </member>
        <member name="F:CSMath.MathUtils.DegToRadFactor">
            <summary>
            Factor for converting degrees to radians.
            </summary>
        </member>
        <member name="F:CSMath.MathUtils.Epsilon">
            <summary>
            Default tolerance
            </summary>
        </member>
        <member name="M:CSMath.MathUtils.IsZero(System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:CSMath.MathUtils.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:CSMath.MathUtils.RadToDeg(System.Double)">
            <summary>
            Convert a value from radian to degree
            </summary>
            <param name="degree">Value in radians</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:CSMath.MathUtils.DegToRad(System.Double)">
            <summary>
            Convert a value from degree to radian
            </summary>
            <param name="degree">Value in degrees</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:CSMath.MathUtils.Sin(System.Double)">
            <summary>
            Returns the sine of specific angle in radians adjusting the value to 0 using <see cref="F:CSMath.MathUtils.Epsilon"/> as tolerance.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.MathUtils.Cos(System.Double)">
            <summary>
            Returns the cosine of specific angle in radians adjusting the value to 0 using <see cref="F:CSMath.MathUtils.Epsilon"/> as tolerance.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSMath.Quaternion">
            <summary>
            Four dimensional vector which is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where w = cos(theta/2).
            </summary>
        </member>
        <member name="P:CSMath.Quaternion.X">
            <summary>
            Specifies the X-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="P:CSMath.Quaternion.Y">
            <summary>
            Specifies the Y-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="P:CSMath.Quaternion.Z">
            <summary>
            Specifies the Z-value of the vector component of the Quaternion.
            </summary>
        </member>
        <member name="P:CSMath.Quaternion.W">
            <summary>
            Specifies the rotation component of the Quaternion.
            </summary>
        </member>
        <member name="P:CSMath.Quaternion.Identity">
            <summary>
            Returns a Quaternion representing no rotation. 
            </summary>
        </member>
        <member name="M:CSMath.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Quaternion from the given components.
            </summary>
            <param name="x">The X component of the Quaternion.</param>
            <param name="y">The Y component of the Quaternion.</param>
            <param name="z">The Z component of the Quaternion.</param>
            <param name="w">The W component of the Quaternion.</param>
        </member>
        <member name="M:CSMath.Quaternion.#ctor(CSMath.XYZ,System.Double)">
            <summary>
            Constructs a Quaternion from the given vector and rotation parts.
            </summary>
            <param name="vectorPart">The vector part of the Quaternion.</param>
            <param name="scalarPart">The rotation part of the Quaternion.</param>
        </member>
        <member name="M:CSMath.Quaternion.CreateFromYawPitchRoll(CSMath.XYZ)">
            <summary>
            Creates a new Quaternion from the given yaw, pitch, and roll, in radians.
            </summary>
            <param name="xyz">X as pitch, Y as yaw and Z as roll</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.Quaternion.CreateFromYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Quaternion from the given yaw, pitch, and roll, in radians.
            </summary>
            <param name="pitch">The pitch angle, around the X-axis.</param>
            <param name="yaw">The yaw angle, around the Y-axis.</param>
            <param name="roll">The roll angle, around the Z-axis.</param>
            <remarks>
            The values must be in radians
            </remarks>
            <returns></returns>
        </member>
        <member name="M:CSMath.Quaternion.CreateFromRotationMatrix(CSMath.Matrix4)">
            <summary>
            Creates a Quaternion from the given rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:CSMath.Quaternion.ToMatrix">
            <summary>
            Create a rotation matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSMath.Quaternion.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.Quaternion.Equals(CSMath.Quaternion)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.Quaternion.Equals(CSMath.Quaternion,System.Int32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <param name="ndecimals">Number of decimals digits to be set as precision.</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.AngleFrom``1(``0,``0)">
            <summary>
            Angle between two <see cref="T:CSMath.IVector"/>.
            </summary>
            <param name="v">The first <see cref="T:CSMath.IVector" />.</param>
            <param name="u">The second <see cref="T:CSMath.IVector" />.</param>
        </member>
        <member name="M:CSMath.VectorExtensions.IsZero``1(``0)">
            <summary>
            Returns true if the magnitude of the <see cref="T:CSMath.IVector"/> is zero.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.DistanceFrom``1(``0,``0)">
            <summary>
            Distance between two <see cref="T:CSMath.IVector"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.CopyValues``1(``0,CSMath.IVector)">
            <summary>
            Copy the component values from a source using the smallest dimension of both parameters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <param name="source"></param>
            <returns>A copy of the <see cref="T:CSMath.IVector"/> with the copied components</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Convert``1(CSMath.IVector)">
            <summary>
            Converts an <see cref="T:CSMath.IVector" /> into an equivalent <see cref="T:CSMath.IVector" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.GetLength``1(``0)">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The vector's length.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Normalize``1(``0)">
            <summary>
            Returns a vector with the same direction as the given vector, but with a length of 1.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Dot``1(``0,``0)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.IsNormalized``1(``0)">
            <summary>
            Gets a value indicating whether the <see cref="T:CSMath.IVector" /> is normalized, or not.
            </summary>
        </member>
        <member name="M:CSMath.VectorExtensions.IsParallel``1(``0,``0)">
            <summary>
            Returns a boolean indicating whether the two given vectors are parallel.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.IsPerpendicular``1(``0,``0)">
            <summary>
            Returns a boolean indicating whether the two given vectors are perpendicular.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.IsEqual``1(``0,``0)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.IsEqual``1(``0,``0,System.Int32)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <param name="ndecimals">Number of decimals digits to be set as precision.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Add``1(``0,``0)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Subtract``1(``0,``0)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Multiply``1(``0,``0)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Multiply``1(``0,System.Double)">
            <summary>
            Multiplies a vector with an scalar.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Divide``1(``0,``0)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Divide``1(``0,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
        </member>
        <member name="M:CSMath.VectorExtensions.Round``1(``0)">
            <summary>
            Round the vector components
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.Round``1(``0,System.Int32)">
            <summary>
            Round the vector components
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector"></param>
            <param name="digits">The number of fractional digits in the return value</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.VectorExtensions.ToEnumerable``1(``0)">
            <summary>
            Get an enumerable with the components of the <see cref="T:CSMath.IVector"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CSMath.XY.op_Addition(CSMath.XY,CSMath.XY)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Subtraction(CSMath.XY,CSMath.XY)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Multiply(CSMath.XY,CSMath.XY)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Multiply(CSMath.XY,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Multiply(System.Double,CSMath.XY)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vector">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Division(CSMath.XY,CSMath.XY)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:CSMath.XY.op_Division(CSMath.XY,System.Single)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="XY">The source vector.</param>
            <param name="value">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:CSMath.XY.op_Division(CSMath.XY,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="XY">The source vector.</param>
            <param name="value">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:CSMath.XY.op_UnaryNegation(CSMath.XY)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:CSMath.XY.op_Equality(CSMath.XY,CSMath.XY)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:CSMath.XY.op_Inequality(CSMath.XY,CSMath.XY)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="P:CSMath.XY.X">
            <summary>
            Specifies the X-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XY.Y">
            <summary>
            Specifies the Y-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XY.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.XY.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XY.#ctor(System.Double,System.Double)">
            <summary>
            Constructor with the coordinate components
            </summary>
            <param name="x">Value of the X-coordinate</param>
            <param name="y">Value of the Y-coordinate</param>
        </member>
        <member name="M:CSMath.XY.#ctor(System.Double)">
            <summary>
            Constructs a vector whose components are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:CSMath.XY.GetAngle">
            <summary>
            Get the angle
            </summary>
            <returns>Angle in radians</returns>
        </member>
        <member name="M:CSMath.XY.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XY.Equals(CSMath.XY,System.Int32)">
            <summary>
            Indicates whether this instance and a specified object are equal with in a specific precison.
            </summary>
            <param name="other"></param>
            <param name="digits">number of decimals</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.XY.Equals(CSMath.XY)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XY.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XY.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZ.op_Addition(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Subtraction(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Multiply(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Multiply(CSMath.XYZ,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Multiply(System.Double,CSMath.XYZ)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vector">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Division(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Division(CSMath.XYZ,System.Single)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="xyz">The source vector.</param>
            <param name="value">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Division(CSMath.XYZ,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="xyz">The source vector.</param>
            <param name="value">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_UnaryNegation(CSMath.XYZ)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Equality(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:CSMath.XYZ.op_Inequality(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="P:CSMath.XYZ.X">
            <summary>
            Specifies the X-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZ.Y">
            <summary>
            Specifies the Y-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZ.Z">
            <summary>
            Specifies the Z-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZ.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.XYZ.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor with the coordinate components
            </summary>
            <param name="x">Value of the X-coordinate</param>
            <param name="y">Value of the Y-coordinate</param>
            <param name="z">Value of the Z-coordinate</param>
        </member>
        <member name="M:CSMath.XYZ.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:CSMath.XYZ.Cross(CSMath.XYZ,CSMath.XYZ)">
            <summary>
            Computes the cross product of two coordinates.
            </summary>
            <param name="xyz1">The first coordinate.</param>
            <param name="xyz2">The second coordinate.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:CSMath.XYZ.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZ.Equals(CSMath.XYZ,System.Int32)">
            <summary>
            Indicates whether this instance and a specified object are equal with in a specific precison.
            </summary>
            <param name="other"></param>
            <param name="digits">number of decimals</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.XYZ.Equals(CSMath.XYZ)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZ.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZ.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZM.op_Addition(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Subtraction(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Multiply(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Multiply(CSMath.XYZM,System.Double)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="left">The source vector.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Multiply(System.Double,CSMath.XYZM)">
            <summary>
            Multiplies a vector by the given scalar.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vector">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Division(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Division(CSMath.XYZM,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="xyzm">The source vector.</param>
            <param name="value">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_UnaryNegation(CSMath.XYZM)">
            <summary>
            Negates a given vector.
            </summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Equality(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Returns a boolean indicating whether the two given vectors are equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:CSMath.XYZM.op_Inequality(CSMath.XYZM,CSMath.XYZM)">
            <summary>
            Returns a boolean indicating whether the two given vectors are not equal.
            </summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="P:CSMath.XYZM.X">
            <summary>
            Specifies the X-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZM.Y">
            <summary>
            Specifies the Y-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZM.Z">
            <summary>
            Specifies the Z-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZM.M">
            <summary>
            Specifies the M-value of the vector component
            </summary>
        </member>
        <member name="P:CSMath.XYZM.Dimension">
            <inheritdoc/>
        </member>
        <member name="P:CSMath.XYZM.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZM.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor with the coordinate components
            </summary>
            <param name="x">Value of the X-coordinate</param>
            <param name="y">Value of the Y-coordinate</param>
            <param name="z">Value of the Z-coordinate</param>
            <param name="m">Value of the M-coordinate</param>
        </member>
        <member name="M:CSMath.XYZM.#ctor(System.Double)">
            <summary>
            Constructs a vector whose elements are all the single specified value.
            </summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:CSMath.XYZM.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZM.Equals(CSMath.XYZM,System.Int32)">
            <summary>
            Indicates whether this instance and a specified object are equal with in a specific precison.
            </summary>
            <param name="other"></param>
            <param name="digits">number of decimals</param>
            <returns></returns>
        </member>
        <member name="M:CSMath.XYZM.Equals(CSMath.XYZM)">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZM.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:CSMath.XYZM.ToString">
            <inheritdoc/>
        </member>
        <member name="T:CSUtilities.Attributes.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="P:CSUtilities.Attributes.StringValueAttribute.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="M:CSUtilities.Attributes.StringValueAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="T:CSUtilities.Converters.IEndianConverter">
            <summary>
            Represents a endian byte converter.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified value as an array of bytes
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified value as an array of bytes.
            </summary>
            <param name="value"></param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToChar(System.Byte[])">
            <summary>
            Converts the specified bytes to a <see cref="T:System.Char" />.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt16(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int16" />.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt16(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt16" />.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt32(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt32(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt64(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int64" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt64(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToDouble(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToSingle(System.Byte[])">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Single" />.
            </summary>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to a <see cref="T:System.Char" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int16" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt16" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int32" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt32" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Int64" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.UInt64" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Double" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Converts the specified bytes to an <see cref="T:System.Single" />.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CSUtilities.Converters.IEndianConverter.GetBytes``1(``0)">
            <summary>
            Converts a generic value to a byte array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CSUtilities.Extensions.IDictionaryExtension">
            <summary>
            Estensions for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.IDictionaryExtension.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>, and copies the element to the value parameter
            </summary>
        </member>
        <member name="T:CSUtilities.Extensions.IEnumerableExtensions">
            <summary>
            Estensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.IEnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return true if the collection is empty.
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforms an enumerable into a Queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.IEnumerableExtensions.TryGet``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0@)">
            <summary>
            Gets the element in an specific index or it's default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="index"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:CSUtilities.Extensions.QueueExtensions">
            <summary>
            Queue utility extensions.
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.QueueExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeue an element in a avoiding the exceptions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="q"></param>
            <returns>the last element or the default value for the type.</returns>
        </member>
        <member name="M:CSUtilities.Extensions.QueueExtensions.TryDequeue``1(System.Collections.Generic.Queue{``0},``0@)">
            <summary>
            Dequeue an element in a avoiding the exceptions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="q"></param>
            <param name="element"></param>
            <returns>If the operation has succeded.</returns>
        </member>
        <member name="M:CSUtilities.Extensions.ReflectionExtensions.HasInterface``1(System.Type)">
            <summary>
            Checks if the type implements a specific interface
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CSUtilities.Extensions.EnumExtensions.AddFlag``1(``0,``0)">
            <summary>
            Adds a flag value to enum
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.EnumExtensions.RemoveFlag``1(``0,``0)">
            <summary>
            Removes the flag value from enum
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.EnumExtensions.GetStringValue``1(``0)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">enum value</param>
            <returns>String Value associated via a <see cref="T:CSUtilities.Attributes.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:CSUtilities.Extensions.ByteExtensions.ToHexString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Convert a byte array into a hex string array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:CSUtilities.Extensions.StringExtensions">
            <summary>
            String utility extensions.
            </summary>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.GetLines(System.String)">
            <summary>
            Return an array with all the lines.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Return if the string is numeric.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Gets a string and returns an array of bytes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ReadBetween(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Returns the first string between 2 characters.
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="keepTokens"></param>
            <exception cref="T:System.FormatException">The line is not closed by the 2 characters.</exception>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.TryReadBetween(System.String,System.Char,System.Char,System.String@,System.Boolean)">
            <summary>
            Reads between 2 characters, but returns a value even if the group is not closed.
            </summary>
            <param name="s"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="group"></param>
            <param name="keepTokens"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ReadUntil(System.String,System.Char)">
            <summary>
            Reads a string until it finds a character.
            </summary>
            <param name="str"></param>
            <param name="c">Character to find.</param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ReadUntil(System.String,System.Char,System.String@)">
            <summary>
            Reads a string until it finds a character.
            </summary>
            <param name="str"></param>
            <param name="c"></param>
            <param name="residual">The last part of the string.</param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.RemoveStartWhitespaces(System.String)">
            <summary>
            Remove all the first whitespaces in a string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.RemoveLast(System.String)">
            <summary>
            Remove the last character of a string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.FirstEqual(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Find the first character in the list of tokens.
            </summary>
            <param name="str"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.FirstEqual(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Int32}@)">
            <summary>
            Find the first character in the list of tokens.
            </summary>
            <param name="str"></param>
            <param name="characters"></param>
            <param name="index">Index of the found character</param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ToArgs(System.String,System.Boolean,System.Boolean)">
            <summary>
            Split an string by spaces and substrings between collons.
            </summary>
            <param name="str"></param>
            <param name="keepCollons"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.Extensions.StringExtensions.ToArgs(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Split an string by spaces and substrings between collons.
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <param name="keepCollons"></param>
            <param name="ignoreEmpty"></param>
            <returns></returns>
        </member>
        <member name="T:CSUtilities.Text.CodePage">
            <summary>
            Code page <seealso cref="T:System.Text.Encoding"/>.
            </summary>
            <remarks>
            Source: https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding?view=net-5.0
            </remarks>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Unknown">
            <summary>
            Unknown code page
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm037">
            <summary>
            IBM EBCDIC (US-Canada)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm437">
            <summary>
            OEM United States
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Asmo708">
            <summary>
            Arabic (ASMO 708)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Dos720">
            <summary>
            Arabic (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm737">
            <summary>
            Greek (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm775">
            <summary>
            Baltic (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm850">
            <summary>
            Western European (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm852">
            <summary>
            Central European (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm855">
            <summary>
            	OEM Cyrillic
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm857">
            <summary>
            Turkish (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm860">
            <summary>
            Portuguese (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm861">
            <summary>
            Icelandic (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Dos862">
            <summary>
            Hebrew (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm863">
            <summary>
            French Canadian (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm864">
            <summary>
            Arabic (864)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm865">
            <summary>
            Nordic (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Cp866">
            <summary>
            Cyrillic (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm869">
            <summary>
            Greek, Modern (DOS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ibm870">
            <summary>
            IBM EBCDIC (Multilingual Latin-2)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Windows874">
            <summary>
            Thai (Windows)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Cp875">
            <summary>
            IBM EBCDIC (Greek Modern)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Shift_jis">
            <summary>
            Japanese (Shift-JIS)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Gb2312">
            <summary>
            Chinese simplified code page (GB2312)
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.Ksc5601">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:CSUtilities.Text.CodePage.big5">
            <summary>
            Chinese Traditional (Big5)
            </summary>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetListedEncoding(CSUtilities.Text.CodePage)">
            <summary>
            Gets the encoding for specified <see cref="T:CSUtilities.Text.CodePage"/>
            </summary>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetMaxByteCount(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.GetMaxCharCount(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.Text.TextEncoding.Windows1252">
            <summary>
            <see cref="F:CSUtilities.Text.CodePage.Windows1252"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSUtilities.IO.StreamIO">
            <summary>
            Utility class to read different data from a stream.
            </summary>
        </member>
        <member name="P:CSUtilities.IO.StreamIO.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:CSUtilities.IO.StreamIO.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
            <param name="filename">File to read/write.</param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
            <param name="filename">File to read/write.</param>
            <param name="mode"></param>
            <param name="access"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
            <param name="stream"></param>
            <param name="createCopy"></param>
            <param name="resetPosition"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:CSUtilities.IO.StreamIO" /> class.
            </summary>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.GetBytes(System.Int32,System.Int32)">
            <summary>
            Get an array of bytes given an offset, before the operation the position is set to 0.
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
            <remarks>This operation don't advance the positon.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.LookByte">
            <summary>
            Look into a byte without moving the position of the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.LookBytes(System.Int32)">
            <summary>
            Look into an array of bytes without moving the position of the stream.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadByte">
            <summary>
            Read a single byte form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadChar">
            <summary>
            Read a character from the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadBytes(System.Int32)">
            <summary>
            Read n bytes at the stream position.
            </summary>
            <remarks>
            Override this method to change the reading system of the whole the class.
            </remarks>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadUntil(System.Char)">
            <summary>
            Read the stream as a string until it finds the match character
            </summary>
            <param name="match">Character to match</param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadShort">
            <summary>
            Read a <see cref="T:System.Int16"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadShort``1">
            <summary>
            Read a <see cref="T:System.Int16"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadUShort">
            <summary>
            Read a <see cref="T:System.UInt16"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadUShort``1">
            <summary>
            Read a <see cref="T:System.UInt16"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadInt">
            <summary>
            Read a <see cref="T:System.Int32"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadInt``1">
            <summary>
            Read a <see cref="T:System.Int32"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadUInt">
            <summary>
            Read a <see cref="T:System.UInt32"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadUInt``1">
            <summary>
            Read a <see cref="T:System.UInt32"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadSingle">
            <summary>
            Read a <see cref="T:System.Single"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadSingle``1">
            <summary>
            Read a <see cref="T:System.Single"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadDouble">
            <summary>
            Read a <see cref="T:System.Double"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadDouble``1">
            <summary>
            Read a <see cref="T:System.Double"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadLong">
            <summary>
            Read a <see cref="T:System.Int64"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadLong``1">
            <summary>
            Read a <see cref="T:System.Int64"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadULong">
            <summary>
            Read a <see cref="T:System.UInt64"/> value form the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadULong``1">
            <summary>
            Read a <see cref="T:System.UInt64"/> value form the stream.
            </summary>
            <typeparam name="T">Endian converter to process the bytes.</typeparam>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadString(System.Int32)">
            <summary>
            Read a string from the stream using the default encoding.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Read a string from the stream.
            </summary>
            <param name="length"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.Write``1(``0)">
            <summary>
            Write a value as an array of bytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.Write``1(``0,CSUtilities.Converters.IEndianConverter)">
            <summary>
            Write a value as an array of bytes defining the byte order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.Write(System.String)">
            <summary>
            Write a string using the default encoding
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.Write(System.String,System.Text.Encoding)">
            <summary>
            Write a string with an specific encoding
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:CSUtilities.IO.StreamIO.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CSUtilities.IO.CsvReader.ReadAsTable(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="separator"></param>
            <param name="hasHeaders"></param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Data.DuplicateNameException"></exception>
            <exception cref="T:System.Data.InvalidExpressionException"></exception>
        </member>
        <member name="T:CSUtilities.Mutation">
            <summary>
            Class that allows to modify, copy or control objects outside their own methods.
            </summary>
        </member>
        <member name="M:CSUtilities.Mutation.CloneSerializable``1(``0)">
            <summary>
            Clone the serializable object into a new instance.
            </summary>
            <typeparam name="T">Type of the serializable object.</typeparam>
            <param name="source">Object to clone.</param>
            <returns>The new instance of the object.</returns>
        </member>
        <member name="M:CSUtilities.Mutation.DeepClone``1(System.Object)">
            <summary>
            Deep copy of an object using reflection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns>A copy of the object</returns>
        </member>
        <member name="M:CSUtilities.Mutation.ExplodeObject``1(``0)">
            <summary>
            store the info of an object in a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns>Returns a dictionary with [paramName, paramValue]</returns>
        </member>
        <member name="M:CSUtilities.Mutation.Serialize(System.String,System.Object)">
            <summary>
            Serialize an object into a file.
            </summary>
            <param name="path">File path.</param>
            <param name="obj">Object to serialize.</param>
        </member>
        <member name="M:CSUtilities.Mutation.Deserialize``1(System.String)">
            <summary>
            Deserialize an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns>The deserializated object.</returns>
        </member>
        <member name="M:CSUtilities.Mutation.Deserialize(System.String)">
            <summary>
            Deserialize an object.
            </summary>
            <param name="path"></param>
            <returns>The deserializated object.</returns>
        </member>
        <member name="T:CSUtilities.TaskManager">
            <summary>
            Class to control tasks and processes.
            </summary>
        </member>
        <member name="M:CSUtilities.TaskManager.ExecuteWithTimeLimit(System.Int32,System.Action)">
            <summary>
            Execute a method in a time span if the method don't finish at the time is canceled.
            Example:
                Action method = () => TaskExample(10);
                bool test = TaskManager.ExecuteWithTimeLimit(3000, method);
                if the action isn't finish in 3 seconds will stop the execution and return false.
            </summary>
            <param name="timeSpan">Time in milliseconds.</param>
            <param name="codeBlock">Block of code, or method to execute in the timespan.</param>
            <returns>bool indicating if the action has finished.</returns>
        </member>
    </members>
</doc>
